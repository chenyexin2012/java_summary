<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!-- 详细配置文档
        http://www.mybatis.org/mybatis-3/zh/configuration.html#properties
    -->
    <!--
    如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：
        在 properties 元素体内指定的属性首先被读取。
        然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。
        最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。
    因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，
    最低优先级的是 properties 属性中指定的属性。-->
    <properties resource="config/config.properties">
        <property name="database.username" value="username"></property>
    </properties>

    <settings>
        <!-- 打印查询语句 -->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!-- 延迟加载 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 开启二级缓存 -->
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!--
        类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。
    -->
    <!--    <typeAliases>
            <typeAlias alias="XXX" type="XXX.XXX.XXX"/>
        </typeAliases>-->

    <!--
        类型处理器
    -->
    <!--    <typeHandlers>
            <typeHandler handler="org.mybatis.typeHandler.XXXTypeHandler"/>
        </typeHandlers>-->

    <!--
         对象工厂
     -->
    <!--    <objectFactory type="org.mybatis.objectfactory.XXXObjectFactory">
            <property name="someProperty" value="100"/>
        </objectFactory>-->

    <!--
        MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：

            Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
            ParameterHandler (getParameterObject, setParameters)
            ResultSetHandler (handleResultSets, handleOutputParameters)
            StatementHandler (prepare, parameterize, batch, update, query)
        -->
    <plugins>
        <plugin interceptor="com.java.summary.mybatis.plugins.MySqlPageInterceptor">
        </plugin>
    </plugins>

    <!--
         配置环境
     默认的环境 ID（比如:default="development"）。
     每个 environment 元素定义的环境 ID（比如:id="development"）。
     事务管理器的配置（比如:type="JDBC"）。
     数据源的配置（比如:type="POOLED"）。
    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <!-- 配置数据库连接信息 -->
            <dataSource type="POOLED">
                <property name="driver" value="${database.driver}"/>
                <property name="url" value="${database.url}"/>
                <property name="username" value="${database.username}"/>
                <property name="password" value="${database.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--    <databaseIdProvider type="DB_VENDOR">
            <property name="SQL Server" value="sqlserver"/>
            <property name="DB2" value="db2"/>
            <property name="Oracle" value="oracle" />
        </databaseIdProvider>-->

    <mappers>
        <mapper resource="mapper/user_mapper.xml"/>
    </mappers>


</configuration>