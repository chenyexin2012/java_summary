package com.java.summary.mybatis;import com.java.summary.mybatis.dao.UserDao;import com.java.summary.mybatis.plugins.Page;import com.java.summary.mybatis.pojo.User;import org.apache.ibatis.builder.xml.XMLConfigBuilder;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.*;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class Test {    private class Param extends Page {        private Long addressId;        public Param() {            super();        }        public Param(Long addressId) {            super();            this.addressId = addressId;        }        public Long getAddressId() {            return addressId;        }        public void setAddressId(Long addressId) {            this.addressId = addressId;        }    }    @org.junit.Test    public void testSqlSessionFactory() throws IOException {        InputStream inputStream = Resources.getResourceAsStream("mybatis/mybatis-config.xml");//      this.getClass().getClassLoader().getResourceAsStream("mybatis/mybatis-config.xml");//      System.out.println(this.getClass().getClassLoader().getResource("mybatis/mybatis-config.xml").getPath());        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);//        System.out.println(sessionFactory);        SqlSession session = sessionFactory.openSession();//        System.out.println(session);        HashMap paramMap = new HashMap<String, Object>();        paramMap.put("page", new Page(0, 2));        paramMap.put("addressId", 1);        Param param = new Param();        param.setOffset(0);        param.setLimit(5);        param.setAddressId(1L);        List<User> list = session.selectList("com.holmes.test.dao.UserDao.selectListByAddressId", param);        System.out.println(list.size());        session.close();    }    @org.junit.Test    public void testSqlSessionManager() {        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("mybatis/mybatis-config.xml");        SqlSessionManager sessionManager = SqlSessionManager.newInstance(inputStream);        System.out.println(sessionManager);////        SqlSession session = sessionManager.openSession();//        System.out.println(session);////        User user = session.selectOne("com.holmes.test.dao.UserDao.selectUserById", 1);//        System.out.println(user);//        session.close();        // SqlSession的生命周期，必须严格限制在方法内部或者request范围（也称之为Thread范围），        // 线程不安全，线程之间不能共享。        // 使用线程局部变量sqlSession，一次执行一系列业务方法，统一处理提交、回滚、关闭sqlSession。        // 全程创建一个Session，销毁一次Session。        sessionManager.startManagedSession(false);        try {            User user = sessionManager.selectOne("com.holmes.test.dao.UserDao.selectUserById", 1);            System.out.println(user);            user.setUserPassword("111111");            sessionManager.update("com.holmes.test.dao.UserDao.update", user);            user = sessionManager.selectOne("com.holmes.test.dao.UserDao.selectUserById", 1);            System.out.println(user);            sessionManager.commit();        } catch (Exception e) {            sessionManager.rollback();        } finally {            sessionManager.close();        }    }    @org.junit.Test    public void testMapper() {        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("mybatis/mybatis-config.xml");        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sessionFactory.openSession();        // 此处返回的其实也是一个UserDao的代理        // 我们调用UserDao中定义的方法时，其实都调用了invoke方法，        // 而程序也正是通过全类名+方法名去寻找需要执行的SQL，因此，在Mapper使用方法重载时，        // 将会导致key重复，因此在Mapper中需要禁止方法重载。        UserDao userDao = session.getMapper(UserDao.class);        User user = userDao.selectUserById(1);        System.out.println(user);        session.close();        session = sessionFactory.openSession();        userDao = session.getMapper(UserDao.class);        user = userDao.selectUserById(1);        session.close();    }    @org.junit.Test    public void testTransaction() {        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("mybatis/mybatis-config.xml");        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sessionFactory.openSession(TransactionIsolationLevel.READ_COMMITTED);        UserDao userDao = session.getMapper(UserDao.class);        try {            List<User> userList = new ArrayList<User>(10);            User user = null;            for (int i = 0; i < 5; i++) {                user = new User();                user.setUserName("sherlock");                user.setUserPassword("123456");                user.setUserEmail("xxx@xxx.com");                userList.add(user);            }            userDao.insertList(userList);            for (User info : userList) {                System.out.println(info);            }            session.commit();        } catch (Exception e) {            session.rollback();        } finally {            session.close();        }    }    @org.junit.Test    public void testRowBounds() {        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("mybatis/mybatis-config.xml");        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sessionFactory.openSession();        List<User> userList = session.selectList("com.holmes.test.dao.UserDao.selectList");        System.out.println(userList.size());    }    @org.junit.Test    public void testXmlBuilder() throws IOException {        InputStream inputStream = Resources.getResourceAsStream("mybatis/mybatis-config.xml");        XMLConfigBuilder configBuilder = new XMLConfigBuilder(inputStream);        configBuilder.parse();    }}