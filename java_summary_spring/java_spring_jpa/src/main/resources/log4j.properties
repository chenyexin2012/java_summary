# 配置根Logger
# log4j.rootLogger  = [level], appenderName1, appenderName2...
# [level]表示日志输出级别：
# FATAL 0
# ERROR 3
# WARN  4
# INFO  6
# DEBUG 7
#
# 配置日志信息输出目的地Appender
# log4j.appender.appenderName = fully.qualified.name.of.appender.class
# log4j.appender.appenderName.option1 = value1
# ...
# log4j.appender.appenderName.optionN = valueN
# Appender为日志输出目的地，通常有以下几种
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#
# 配置日志信息的格式（布局）
# log4j.appender.appenderName.layout  =  fully.qualified.name.of.layout.class
# log4j.appender.appenderName.layout.option1  =  value1
# ...
# log4j.appender.appenderName.layout.optionN  =  valueN
# layout为日志输出格式，通常有以下几种：
# org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#
# 日志格式化
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
#    比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#    举例：Testlog4.main(TestLog4.java: 10 )
#
# 配置日志输出级别
log4j.rootLogger=INFO,stdout

# 输出日志至控制台
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yy-MM-dd HH:mm:ss:SSSS} %p %C{1}.%M(%L) | %m%n

# 输出日志至文件
#log4j.appender.file=org.apache.log4j.FileAppender
#log4j.appender.file.File=D:/log/log.log
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{yy-MM-dd HH:mm:ss:SSSS} %p %C{1}.%M(%L) | %m%n

# 输出到日志文件且每天产生一个日志文件
#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.File = D:/log/log.log
#log4j.appender.D.Append = true
## 输出DEBUG级别以上的日志
#log4j.appender.D.Threshold = DEBUG
#log4j.appender.D.layout = org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern = %d{yy-MM-dd HH:mm:ss:SSSS} %p %C{1}.%M(%L) | %m%n






log4j.logger.org.springframework.transaction.interceptor = trace
#log4j.logger.org.springframework.orm.jpa=debug
#log4j.logger.org.springframework.transaction=debug

#log4j.logger.ims=DEBUG
#log4j.logger.tems=DEBUG
#log4j.logger.com=DEBUG
#log4j.logger.com.ibatis.io=ERROR
#
#log4j.logger.com.opensymphony.oscache=INFO
#log4j.logger.net.sf.navigator=ERROR
#log4j.logger.org.apache.commons=ERROR
#log4j.logger.org.apache.struts=INFO
#log4j.logger.org.displaytag=ERROR
#log4j.logger.org.springframework=WARN
#log4j.logger.com.ibatis.db=WARN
#log4j.logger.org.apache.velocity=FATAL
#
#log4j.logger.com.opensymphony.xwork2=INFO
#log4j.logger.org.apache.struts2=INFO

#log4j.logger.org.apache.struts2.convention=INFO
#log4j.logger.com.opensymphony.xwork2.util.finder=INFO

#log4j.logger.com.canoo.webtest=WARN

# All hibernate log output of "info" level or higher goes to stdout.
# For more verbose logging, change the "info" to "debug" on the last line.
#log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN
#log4j.logger.org.hibernate=WARN
#log4j.logger.org.hibernate.SQL=debug
#log4j.logger.org.hibernate.type=trace
#log4j.logger.org.hibernate.transaction=trace

#for jsp
#log4j.logger.org.apache.jasper.servlet=OFF
#log4j.logger.org.apache.catalina.core=OFF