<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${dataSource.jdbc_driverClassName}"/>
        <property name="url" value="${dataSource.jdbc_url}"/>
        <property name="username" value="${dataSource.jdbc_username}"/>
        <property name="password" value="${dataSource.jdbc_password}"/>
        <property name="initialSize" value="${dataSource.initialSize}"/>
        <property name="maxActive" value="${dataSource.maxActive}"/>
        <property name="minIdle" value="${dataSource.minIdle}"/>
        <property name="maxWait" value="${dataSource.maxWait}"/>
        <property name="validationQuery" value="${dataSource.validationQuery}"/>
        <property name="testOnBorrow" value="${dataSource.testOnBorrow}"/>
        <property name="testOnReturn" value="${dataSource.testOnReturn}"/>
        <property name="testWhileIdle" value="${dataSource.testWhileIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}"/>
        <property name="removeAbandoned" value="${dataSource.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${dataSource.logAbandoned}"/>
        <property name="filters" value="${dataSource.filters}"/>
        <!-- 开启数据库密码加密 -->
        <property name="connectionProperties"
                  value="druid.stat.slowSqlMillis=5000;config.decrypt=true;config.decrypt.key=${dataSource.jdbc_publickey}"/>
    </bean>

    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring/mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:spring/mybatis/mapper/*.xml"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="baseDaoImpl" class="com.holmes.mybatis.dao.BaseDaoImpl">
        <property name="sqlSessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.holmes.mybatis.dao.*.*(..))"/>
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="transactionPointcut" order="1"/>
    </aop:config>
</beans>